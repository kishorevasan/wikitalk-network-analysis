data <- fread("C:/Users/Harri/Desktop/repos/csss_project/wiki-talk-temporal.txt")
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
data
head(data)
View(data)
unique(data[, (name)])
data[, (name)]
unique(data[, eval(name)])
data[, get(name)])
data[, get(name)]
unique(data[, get(name)])
ind <- 1
unique(data[, get(name)]))[ind]
unique(data[, get(name)])[ind]
x <- data[get(name) == per]
x
per
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
x
x <- x[, c(1,2)]
x
p_load(data.table, anytime, igraph)
test<- graph_from_data_frame(x)
test
ind <- 4
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
x <- x[, c(1,2)]
x
test<- graph_from_data_frame(x)
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object
\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date
\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs
\n Additional features tbi is naming nodes")
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object
Second Argument is num_weeks, a numeric number of weeks to aggregate from first date
Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs
Additional features tbi is naming nodes")
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\nSecond Argument is num_weeks, a numeric number of weeks to aggregate from first date\nThird Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\nAdditional features tbi is naming nodes")
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\n Additional features tbi is naming nodes")
aggregator <- function(data, num_weeks, ret_igraphs){
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
if (ret_igraphs == FALSE){
return(data)
} else {
igraphs <- list()
for (ind in 1:length(unique(data[, get(name)]))){
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[ind] <- x
}
return(igraphs)
}
}
data <- fread("C:/Users/Harri/Desktop/repos/csss_project/wiki-talk-temporal.txt")
cat("\n Package requirements: pacman (will download all others)")
require(pacman)
p_load(data.table, anytime, igraph)
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\n Additional features tbi is naming nodes")
aggregator <- function(data, num_weeks, ret_igraphs){
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
if (ret_igraphs == FALSE){
return(data)
} else {
igraphs <- list()
for (ind in 1:length(unique(data[, get(name)]))){
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[ind] <- x
}
return(igraphs)
}
}
x <- aggregator(data = data, num_weeks = 3, ret_igraphs = FALSE)
x
head(x)
x <- aggregator(data = data, num_weeks = 3, ret_igraphs = TRUE)
data <- fread("C:/Users/Harri/Desktop/repos/csss_project/wiki-talk-temporal.txt")
cat("\n Package requirements: pacman (will download all others)")
require(pacman)
p_load(data.table, anytime, igraph)
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\n Additional features tbi is naming nodes")
aggregator <- function(data_in, num_weeks, ret_igraphs){
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
if (ret_igraphs == FALSE){
return(data)
} else {
igraphs <- list()
for (ind in 1:length(unique(data[, get(name)]))){
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[ind] <- x
}
return(igraphs)
}
}
x <- aggregator(data_in = data, num_weeks = 3, ret_igraphs = FALSE)
x
head(x)
x <- aggregator(data_in = data, num_weeks = 3, ret_igraphs = TRUE)
warnings()
x
data_in <- data
num_weeks <- 3
ret_igraphs <- TRUE
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
data
head(data)
igraphs <- list()
length(unique(data[, get(name)]))
ind<-1
period <- unique(data[, get(name)])[ind]
period
x <- data[get(name) == period]
x
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
igraphs[ind] <- x
igraphs <- list()
igraphs[[ind]] <- x
igraphs
ind <- 2
period <- unique(data[, get(name)])[ind]
x <- data[get(name) == period]
dim(x)
x
data[nrow(data), get(name)]
x <- data[get(name) == ind]
x
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
igraphs[[ind]] <- x
data <- fread("C:/Users/Harri/Desktop/repos/csss_project/wiki-talk-temporal.txt")
cat("\n Package requirements: pacman (will download all others)")
require(pacman)
p_load(data.table, anytime, igraph)
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\n Periods without any edges not removed (important)\n Additional features tbi is naming nodes")
aggregator <- function(data_in, num_weeks, ret_igraphs){
data_in <- data
num_weeks <- 3
ret_igraphs <- TRUE
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
if (ret_igraphs == FALSE){
return(data)
} else {
igraphs <- list()
for (ind in 1:data[nrow(data), get(name)]){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
return(igraphs)
}
}
x <- aggregator(data_in = data, num_weeks = 3, ret_igraphs = TRUE)
x
cat("\n Package requirements: pacman (will download all others)")
require(pacman)
p_load(data.table, anytime, igraph)
cat("Loading function aggregator:
\n***THIS FUNCTION ASSUMES YOU DID NOT CHANGE THE DATA FROM DOWNLOAD (though easy to generalize if needed)***)
\n\n First Argument is data, an datatable object\n Second Argument is num_weeks, a numeric number of weeks to aggregate from first date\n Third Argument is ret_igraphs, TRUE if you want list per period of igraph objects or FALSE if you just want labeled datatable
\n Returns datatable or simplified list of graphs\n Periods without any edges not removed (important)\n Additional features tbi is naming nodes")
aggregator <- function(data_in, num_weeks, ret_igraphs){
# data table copies by references, so need to save to not change base
data <- copy(data_in)
# set-up variables
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
# assign period to dates
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
if (ret_igraphs == FALSE){
return(data)
} else {
# slice by each and convert, append to list
igraphs <- list()
for (ind in 1:data[nrow(data), get(name)]){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
return(igraphs)
}
}
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-users-edits""
library(data.table)
source(paste0(repo_path, "utils/aggregator.R"))
paste0(repo_path, "utils/aggregator.R")
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-users-edits"
paste0(repo_path, "utils/aggregator.R")
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-users-edits/"
source(paste0(repo_path, "utils/aggregator.R"))
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-users-edits/"
source(paste0(repo_path, "utils/aggregator.R"))
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-user-edits/"
paste0(repo_path, "utils/aggregator.R")
source(paste0(repo_path, "utils/aggregator.R"))
setwd(repo_path)
source("utils/aggregator.R")
# load data
data <- fread("data/wiki-talk-temporal.txt")
graphs_2wks <- aggregator(data_in = data, num_weeks = 2, ret_igraphs = TRUE)
str(graphs_2wks)
data_in<- data
num_weeks <-2
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
head(data)
get(name)
ind <-1
x <- data[get(name) == ind]
x
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
V(x)
igraphs[[ind]] <- x
igraphs <- list()
igraphs[[ind]] <- x
igraphs
data_in<- data
num_weeks <-2
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- as.numeric(diff / days)
diff <- data[nrow(data), time] - data[1, time]
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
# load data
data <- fread("data/wiki-talk-temporal.txt")
data_in<- data
num_weeks <-2
data <- copy(data_in)
setnames(data, c("from", "to", "time"))
data[, time := anydate(time)]
setorder(data, time)
days <- num_weeks * 7
name <- paste0("period_", as.character(num_weeks), "_weeks")
diff <- data[nrow(data), time] - data[1, time]
diff <- as.numeric(diff / days)
start <- data[1, time]
data[, (name) := NaN]
for (per in 1:ceiling(diff)){
data[(time < (start + (days * per)))
&
(time >= (start + (days * (per - 1)))), (name) := per]
}
igraphs <- list()
for (ind in 1:data[nrow(data), get(name)]){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
str(igraphs)
igraphs <- list()
ind <- 1
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
ind <- 2
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
ind <- 4
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
data[nrow(data), get(name)]
diff
ind <- 165
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
ind <- 166
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
x
igraphs
for (ind in 1:5){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
for (ind in 1:20){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
igraphs <- list()
for (ind in 1:50){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
for (ind in 50:100){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
for (ind in 100:166){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
for (ind in 100:110){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
for (ind in 166){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
data[nrow(data), get(name)]
as.numeric(data[nrow(data), get(name)])
igraphs <- list()
for (ind in 1:as.numeric(data[nrow(data), get(name)])){
x <- data[get(name) == ind]
x <- x[, c(1,2)]
x <- simplify(graph_from_data_frame(x))
igraphs[[ind]] <- x
}
igraphs
library(data.table)
# set repo/core path
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-user-edits/"
setwd(repo_path)
# load function
source("utils/aggregator.R")
# load data
data <- fread("data/wiki-talk-temporal.txt")
# example 1: aggregate over two weeks return graphs -- takes ~1min
graphs_2wks <- aggregator(data_in = data, num_weeks = 2, ret_igraphs = TRUE)
library(data.table)
# set repo/core path
repo_path <- "C:/Users/Harri/Desktop/repos/wikipedia-user-edits/"
setwd(repo_path)
# load function
source("utils/aggregator.R")
# load data
data <- fread("data/wiki-talk-temporal.txt")
# example 1: aggregate over two weeks return graphs -- takes ~1min
graphs_2wks <- aggregator(data_in = data, num_weeks = 2, ret_igraphs = TRUE)
graphs_2wks
# example 2: aggregate over three weeks return graphs
graphs_3wks <- aggregator(data_in = data, num_weeks = 3, ret_igraphs = TRUE)
